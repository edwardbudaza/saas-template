generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? // @db.Text
  access_token       String? // @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? // @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                      String                @id @default(cuid())
  name                    String?
  email                   String                @unique
  password                String?               // Only if using credentials
  emailVerified           DateTime?
  image                   String?
  credits                 Int                   @default(3)
  lemonSqueezyCustomerId  String?               @unique
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  accounts                Account[]
  sessions                Session[]
  orders                  LemonSqueezyOrder[]
  transactions            CreditTransaction[]
}

model LemonSqueezyOrder {
  id            String   @id @default(cuid())
  userId        String
  orderId       String   @unique // LemonSqueezy order ID
  productId     String
  credits       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // New fields
  orderTotal    Int?     // Amount in cents
  status        String   @default("paid") // paid, refunded, etc.
  customerEmail String?

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([orderId])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int      // Positive = added, Negative = used
  type        String   // "purchase", "consumption", "refund", etc.
  description String?
  orderId     String?  // Optional FK to LemonSqueezyOrder
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}
